/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 80027
 Source Host           : localhost
 Source Database       : moyu_blog

 Target Server Type    : MySQL
 Target Server Version : 80027
 File Encoding         : utf-8

 Date: 05/11/2022 00:13:06 AM
*/

SET NAMES utf8;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
--  Table structure for `t_blog`
-- ----------------------------
DROP TABLE IF EXISTS `t_blog`;
CREATE TABLE `t_blog` (
  `id` varchar(255) NOT NULL COMMENT 'ID',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `description` varchar(255) DEFAULT NULL COMMENT '描述',
  `content` longtext COMMENT '内容',
  `views` int DEFAULT NULL COMMENT '浏览次数',
  `published` varchar(10) DEFAULT NULL COMMENT '是否发表',
  `create_time` datetime DEFAULT NULL COMMENT '创建时间',
  `title_image` varchar(255) DEFAULT NULL COMMENT '题图',
  `user_id` varchar(255) DEFAULT NULL COMMENT '作者',
  `category_id` varchar(255) DEFAULT NULL COMMENT '分类',
  PRIMARY KEY (`id`),
  KEY `author` (`user_id`),
  KEY `category` (`category_id`),
  KEY `category_id` (`category_id`),
  KEY `author_id` (`user_id`),
  CONSTRAINT `t_blog_category` FOREIGN KEY (`category_id`) REFERENCES `t_category` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT `t_blog_user` FOREIGN KEY (`user_id`) REFERENCES `t_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- ----------------------------
--  Records of `t_blog`
-- ----------------------------
BEGIN;
INSERT INTO `t_blog` VALUES ('1', 'SpringBoot 学习指南', '博客一的描述', '# SpringBoot学习笔记\n\n## 0. 写在前面\n\n笔记来源视频：黑马程序员SpringBoot2全套视频教程，springboot零基础到项目实战（spring boot2完整版）\n\n链接：https://www.bilibili.com/video/BV15b4y1a7yG?from=search&seid=4138562537199934331&spm_id_from=333.337.0.0\n\n## 1. 创建SpringBoot工程\n\nSpringBoot的GAV坐标，分别对应Group、Artifact、Version。\n\n**注意：**Java版本需要和JDK版本匹配，一般用JDK8和Java包就行。\n\n**创建SpringBoot工程的几种方式**\n\n1. 使用IDEA中的Spring Initializer创建，基于https://start.spring.io创建。\n2. 在SpringBoot官网，选择Quickstart Your Project，创建工程并下载解压，导入IDE。\n3. 在IDEA里面创建SpringBoot工程的时候更改start service URL，基于阿里云创建项目，地址：https://start.aliyun.com。可以直接在代码里面更改版本\n4. 纯手工创建SpringBoot。创建普通的Maven工程，需要进行以下配置\n   1. 添加继承关系 parent 标签，继承spring-boot-starter-parent\n   2. 添加依赖spring-boot-starter-web\n   3. 制作引导类Application\n\n## 2. 入门案例解析 - 了解四个属性\n\n### 2.1 parent\n\n开发springboot应用要继承spring-boot-starter-parent，在spring-boot-starter-parent中定义了若干个依赖**管理**，继承parent模块可以避免使用相同技术时出现的依赖版本冲突。也可以是继承，直接引入依赖，具体参考使用阿里云创建s pringboot项目的pom.xml文件。\n\n### 2.2 starter\n\nstarter中定义了springboot项目中使用的所有依赖坐标，以达到减少依赖配置的目的。**注意：**parent中仅定义了若干坐标版本号（管理而非依赖）。\n\n使用坐标时按照以下两个步骤：\n\n1. 只导入依赖的GA坐标，不指定版本号。\n2. 如果s pringboot没有收录改版本则会报错，此时再去指定版本即可。不报错不需要指定版本，springboot会帮我们引入最合适的版本。\n\n### 2.3 引导类\n\n扫描：当前所在包及其子包\n\nSSM：bean\n\n- SpringBoot的引导类是Boot程序的执行入口，运行main方法就可以启动项目\n- SpringBoot工程运行后初始化Spring容器，扫描引导类**所在包及其子包**加载bean。\n\n### 2.4 辅助功能 - 内嵌tomcat\n\n```java\n/* 排除依赖 */\n\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-jetty</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n```\n\nSpringBoot内置的三款服务器（了解即可）\n\n- tomcat（默认）：apache出品，粉丝多，应用面广，负载了若干较重的组件。**学习阶段已经足够**\n- jetty：更轻量级，负载性能远不及tomcat。Google在使用\n- undertow：负载性能勉强跑行tomcat\n\n**注意：**内嵌的tomcat的工作原理是将tomcat作为一个对象运行，将给springboot去管理。\n\n## 3. REST开发 - 知识加油站\n\n### 3.1 REST简介\n\nREST（Representional State Transfer），表现形式状态转换\n\n传统风格资源描述形式\n\n- http://localhost/user/getById?id=1\n\nREST风格描述形式\n\n- http://localhost/user/1\n\nREST风格访问资源使用的**行为动作**对区分**对资源进行了何种操作**\n\n- http://localhost/users 		查询全部用户信息	GET（查询）\n- http://localhost/users/1       查询指定用户信息   GET（查询）\n- http://localhost/users           添加用户信息。       POST（新增/保存）\n- http://localhost/users          修改用户信息。          PUT（修改/更新）\n- http://localhost/users/1      删除用户信息。         DELETTE（删除）\n\n根据REST风格对资源进行访问称为：**RESTful**\n\n## 4. 配置文件篇\n\n### 4.1 基础配置\n\nspringboot支持3种配置文件：properties、yml、yaml。优先级为：properties > yml > yaml。\n\n一般项目中使用 `.yml` 文件。**注意：**数据与冒号之前要有一个**空格**。\n\n**操作方式**（经测试，一般不会有问题）：创建好springboot工程之后直接删除properties文件，创建yml文件即可。\n\n### 4.2 yml读取数据\n\n使用springboot提供的@Value注解读取数据，注入到代码中，注入方式：`${一级属性名.二级属性名...}`。具体代码参考`springboot_03_yaml`工程。\n\n### 4.3 yml数据封装\n\nyml中的数据可以指定哪一部分被spring读取，spring将yml中的这部分数据封装为一个类，这也是最常用的方式。使用这种方法需要以下几个步骤：\n\n1. 首先在yml中创建数据\n2. 接着在java代码中创建这个类，注意**类的属性**一定要和**yml中的属性名称**相同。\n3. 使用**@Component**注解将封装类定义为spring光里的bean，否则无法进行注入\n4. 使用**@ConfigurationProPerties**注解**绑定**指定的数据到封装类中\n\n## 5. 整合第三方数据\n\n### 5.1 整合JUnit\n\n```java\n@SpringBootTest(classes = Springboot04JunitApplication.class)\nclass Springboot04JunitApplicationTests {\n\n    // 1.注入你要测是的对象\n    @Autowired\n    private BookDao bookDao;\n\n    @Test\n    void contextLoads() {\n        // 2. 执行要测试对象的方法\n        bookDao.save();\n    }\n\n}\n```\n\n**注意：**如果测试类在SpringBoot启动类的包或其子包中，可以省略启动类的设置，也就是省略classes的设定。\n\n### 5.2 整合Mybatis\n\n整合Mybatis主要有以下三步，\n\n1. 在pom文件中导入对应的坐标\n2. 在配置文件中设置数据源参数\n3. 定义数据层接口与映射配置\n4. 测试类注入Dao，进行测试\n\n```java\n# 配置数据库相关信息\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm_db\n    username: root\n    password: sunxusen\n    \n \n# 定义数据接口层与映射配置\nimport org.apache.ibatis.annotations.Mapper;\nimport org.apache.ibatis.annotations.Select;\n\n@Mapper\npublic interface BookDao {\n\n    @Select(\"select * from tbl_book where id = #{id}\")\n    public Book getById(Integer id);\n}\n```\n\n### 5.3 整合Mybatis-Plus\n\n整合mybatis-plus的步骤如下\n\n1. 手工添加SpringBoot整合mybatis-plus的坐标，可以通过mvnrepository获取\n2. 配置相关信息\n3. 定义数据接口层与映射配置，继承BaseMapper\n\n```java\n// 第一步\n<dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.3</version>\n</dependency>\n\n\n// 第二步\n# 配置数据库相关信息\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC\n    username: root\n    password: sunxusen\n\n# 设置 mybatis-plus 的相关配置 -- 表名的前缀，日志的开启\nmybatis-plus:\n  global-config:\n    db-config:\n      table-prefix: tbl_\n      id-type: auto\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n      \n      \n// 第三步      \nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.itheima.entity.Book;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface BookDao extends BaseMapper<Book> {\n\n}\n```\n\n**注意：**一般是 **mybatis-plus-boot-starter**\n\n**数据层接口使用BaseMapper简化开发**\n\n### 5.4 整合Druid\n\n**注意：踩坑！！！！！**\n\n整合Druid的时候一定是导入 **druid-spring-boot-starter**，而不是 druid。\n\n```java\n<!--        druid 的版本需要手工加，因为在 spring-boot-starter-parent 没有维护这个版本-->\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>druid-spring-boot-starter</artifactId>\n            <version>1.2.6</version>\n        </dependency>\n```\n\n整合Druid首先需要导入Druid的starter，根据Druid提供的配置方式进行配置，注意通用型配置，和Druid专用配置\n\n```yml\n## 配置数据库相关信息 (不是整合型的配法)\n#spring:\n#  datasource:\n#    driver-class-name: com.mysql.cj.jdbc.Driver\n#    url: jdbc:mysql://localhost:3306/ssm_db\n#    username: root\n#    password: sunxusen\n#    type: com.alibaba.druid.pool.DruidDataSource\n\n# 整合型的配法\nspring:\n  datasource:\n    druid:\n      driver-class-name: com.mysql.cj.jdbc.Driver\n      url: jdbc:mysql://localhost:3306/ssm_db\n      username: root\n      password: sunxusen\n```\n\n## 6. SSMP案例整合\n\n### 6.1 数据层标准开发 - 基础CRUD\n\nLombok是一个Java类库，提供了一组注解，简化POJO实体类的开发。\n\n**常用注解：@Data**\n\n为当前实体类在编译期设置对应的get/set方法、toString方法、hashCode方法、equals方法。\n\n数据层标准开发主要包含以下两个部分：\n\n1. 实体类，一般放在entity包下，其中的字段设置与数据库字段匹配，使用Lombok\n2. Dao层，实体类的数据库操作层，使用mybatis-plus开发Dao接口，继承BaseMapper即可。\n3. 制作测试类测试Dao功能是否有效\n\n### 6.2 Mybatis-Plus 分页\n\n首先介绍一下分页的概念：分页操作是在Mybatis Plus的常规操作上增强得到，内部是动态拼写SQL语句，因此需要增强对应的功能，使用MybatisPlus拦截器实现。\n\n具体实现步骤有以下两步：\n\n1. 创建IPage对象，传递当前页数和每页的数量\n2. 配置MybatisPlus拦截器\n\n```java\n @Test\n    void testGetPage() {\n        IPage page = new Page(1, 2);\n        bookDao.selectPage(page, null);\n    }\n\n@Configuration\npublic class MybatisPlusConfig {\n\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor() {\n        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();\n        interceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return interceptor;\n    }\n\n}\n```\n\n### 6.3 Mybatis-Plus 条件查询\n\nMybatis-Plus条件查询的方式有两种：\n\n1. 使用QueryWrapper对象封装查询条件\n2. 使用LambdaQueryWrapper对象（推荐使用这个）\n\n**注意：**其实Mybatis-Plus的条件查询就是将数据库的查询操作封装成方法调用，查询条件**支持动态条件拼装**\n\n```java\n @Test\n    void testGetBy() {\n        QueryWrapper<Book> queryWrapper = new QueryWrapper<>();\n        queryWrapper.like(\"name\", \"Spring\");\n        bookDao.selectList(queryWrapper);\n    }\n\n    @Test\n    void testGetBy2() {\n        String name = \"Java\";\n        LambdaQueryWrapper<Book> lambdaQueryWrapper = new LambdaQueryWrapper<>();\n        lambdaQueryWrapper.like(name != null, Book::getName, \"Spring\");\n        bookDao.selectList(lambdaQueryWrapper);\n    }\n```\n\n### 6.4 业务层标准开发 - 基础CRUD\n\n业务层的开发比较简单，和数据层开发有些类似。但要注意Service接口名称定义成业务名称，并与Dao接口名称进行区分。\n\n业务层建议：**制作测试类测试Service层功能是否有效**\n\n创建流程：\n\n1. 定义Service接口\n2. 定义Service接口实现类\n\n### 6.5 业务层快速开发\n\n如果有多个实体类进行的操作都差不多，就要写大量的相似代码，此时可以利用Mybatis-Plus提供的业务层通用接口（IService<T>）与业务层通用实现类（ServiceImpl<M,T>）。\n\n**注意：**可以在通用基础类的基础上做功能重载或功能追加\n\n使用步骤有以下两步：\n\n1. 创建接口继承IService<T>\n2. 创建接口实现类实现接口，并继承ServiceImpl<M,T>\n\n如下代码所示\n\n```java\n// step1\n\npublic interface IBookService extends IService<Book> {\n}\n\n\n// step 2\n@Service\npublic class BookServiceImpl extends ServiceImpl<BookDao, Book> implements IBookService {\n}\n```\n\n### 6.6 表现层标准开发\n\n表现层的开发步骤一般如下\n\n1. 在controller包下创建对应的controller实体类\n2. 在controller实体类下注入对应的service接口\n3. 基于Restful制作表现层接口\n\n**注意：在Restful中，各种操作方式对应的接口如下**\n\n- 新增 —— POST请求\n- 删除 —— DELETE请求\n- 修改 —— PUT请求\n- 查询 —— GET请求\n\n在表现层开发时，接收参数的方式有两种，分别是\n\n- 实体数据：使用@RequestBody接收，一般是JSON数据\n- 路径变量：使用@PathVariable接收，一般放在请求路径中\n\n接收参数的方式没有特别指定，可以自由切换。\n\n**code**\n\n```java\npackage com.itheima.controller;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.itheima.entity.Book;\nimport com.itheima.service.IBookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n/**\n * 这个代码没啥用，主要看BookController，此代码没有进行表现层数据一致性处理，BookController进行了一致性处理。\n */\n\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController2 {\n\n    @Autowired\n    private IBookService iBookService;\n\n    @GetMapping\n    public List<Book> getAll() {\n        return iBookService.list();\n    }\n\n    @PostMapping\n    public Boolean save(@RequestBody Book book) {\n        return iBookService.save(book);\n    }\n\n    @PutMapping\n    public Boolean update(@RequestBody Book book) {\n        return iBookService.updateById(book);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public Boolean delete(@PathVariable Integer id) {\n        return iBookService.removeById(id);\n    }\n\n    @GetMapping(\"/{id}\")\n    public Book getById(@PathVariable Integer id) {\n        return iBookService.getById(id);\n    }\n\n    @GetMapping(\"/{currentPage}/{pageSize}\")\n    public IPage<Book> getPage(@PathVariable int currentPage, @PathVariable int pageSize) {\n        return iBookService.getPage(currentPage, pageSize);\n    }\n\n\n}\n\n```\n\n### 6.7 表现层数据一致性处理\n\n在之前的表现层开发中，后端返回的数据格式不统一，有true、false，也有单条json数据，也有json数组，不利于前端人员的处理。因此，需要在表现层进行数据一致性处理，常用的操作是定义一个code状态吗（或者flag表示操作是否成功），外加一个data用于存放操作返回的数据。\n\n操作步骤主要有以下两步\n\n1. 自定义Result类\n2. 此盖controller的代码，返回结果为Result对象\n\n**code**\n\n```java\npackage com.itheima.controller.utils;\n\nimport lombok.Data;\n\n@Data\npublic class Result {\n    private Boolean flag;\n    private Object data;\n\n    public Result() {\n\n    }\n\n    public Result(Boolean flag) {\n        this.flag = flag;\n    }\n\n    public Result(Boolean flag, Object data) {\n        this.flag = flag;\n        this.data = data;\n    }\n}\n```\n\n```java\npackage com.itheima.controller;\n\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.itheima.controller.utils.Result;\nimport com.itheima.entity.Book;\nimport com.itheima.service.IBookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n\n    @Autowired\n    private IBookService iBookService;\n\n    @GetMapping\n    public Result getAll() {\n        return new Result(true, iBookService.list());\n    }\n\n    @PostMapping\n    public Result save(@RequestBody Book book) {\n        return new Result(iBookService.save(book));\n    }\n\n    @PutMapping\n    public Result update(@RequestBody Book book) {\n        return new Result(iBookService.updateById(book));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public Result delete(@PathVariable Integer id) {\n        return new Result(iBookService.removeById(id));\n    }\n\n    @GetMapping(\"/{id}\")\n    public Result getById(@PathVariable Integer id) {\n        return new Result(true, iBookService.getById(id));\n    }\n\n    @GetMapping(\"/{currentPage}/{pageSize}\")\n    public Result getPage(@PathVariable int currentPage, @PathVariable int pageSize) {\n        return new Result(true, iBookService.getPage(currentPage, pageSize));\n    }\n\n\n}\n\n```\n\n\n\n\n\n看到了P45，未完待续……\n\n\n\n\n\n**快捷键使用**\n\n```\ncommand ;  	<---> Project Structure\ncommand ,		<---> Preferences\noption return		<---> 引入局部变量\n```\n\n**一些BUG**\n\n1. 程序包org.springframework.stereotype 不存在——解决办法	https://blog.csdn.net/yyp0304Devin/article/details/107334656\n2. SpringBoot笔记：fail to read artifact descriptor for mysql：XX.jar  https://blog.csdn.net/weixin_44851932/article/details/103036367\n3. springboot项目启动之后立即关闭，没有导入web模块，只有导入web模块才会自带tomcat服务器。', '24', '是', '2022-05-07 17:46:37', '', '1', '1'), ('7ca9fe387c564edaa5e6e54138de8c2e', '5555555', 'description', '|column1|column2|column3|\n|-|-|-|\n|content1|content2|content3|\n\n1. 111\n2. 222\n3. 333\n\n```python\ndef function(a, b):\n	return a + b\n\n```\n', '12', '是', '2022-05-07 17:46:42', 'https://img95.699pic.com/photo/50237/0105.jpg_wh300.jpg', '1', 'eb8e2df26ec7401b9b2a9eaae095f41c'), ('81a562eb666b402592566b96586a5b4a', '111', 'description', '111', '6', '是', '2022-05-07 17:46:44', 'https://img95.699pic.com/photo/50237/0105.jpg_wh300.jpg', '1', '1'), ('858854b89fe64a9a9c6198b27d1abf1a', '6666666111', 'description', '66666666', '0', '是', '2022-03-17 19:23:53', '', '1', 'a5ff4f5e96984604af8d07ea61f57ada'), ('99684bf18b1849a18d007ca1942b47e1', '9999', 'description', '999', '0', '是', '2022-03-17 18:43:21', '', '1', '2ad568e4f5f44131ad6c8fa55f4f0e63'), ('b00382397d3449a0bbea62359cb42d24', '444', 'description', '444444', '0', '是', '2021-03-16 20:13:10', '', '1', '1'), ('c200be93e0a84ba2a770e7b6ef1ef994', '77777', 'description', '7777', '0', '否', '2021-03-17 18:43:02', '', '1', '8e3607022a3b42499d2e1921e0289132'), ('e333ac27be5848b3b8fd3a9a8717258e', '8888', 'description', '888', '1', '否', '2020-05-02 10:42:54', '', '1', '61f594724c1e4c399243b19a6399ad4e'), ('f12abf38af494e38a8a78fd24a8592d7', '222', 'description', '222', '0', '是', '2020-03-17 19:35:13', 'https://img95.699pic.com/photo/50237/0105.jpg_wh300.jpg', '1', 'f88ef56e2c2c43cebf71803ea72c1a12'), ('ff1459fbf1c04c6e849ad2b232b9fdb9', '33333', 'description', '333333', '0', '否', '2021-03-16 20:08:38', '', '1', '4c8f0ac812024c04ba447f313405663f');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
